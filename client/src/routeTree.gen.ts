/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnitImport } from './routes/unit'
import { Route as ItemImport } from './routes/item'
import { Route as InventoryImport } from './routes/inventory'
import { Route as HomeImport } from './routes/home'
import { Route as CategoryImport } from './routes/category'
import { Route as AddInventoryImport } from './routes/addInventory'
import { Route as FreezerIndexImport } from './routes/freezer/index'
import { Route as FreezerFreezerIdImport } from './routes/freezer/$freezerId'
import { Route as CategoryCategoryIdImport } from './routes/category/$categoryId'

// Create/Update Routes

const UnitRoute = UnitImport.update({
  path: '/unit',
  getParentRoute: () => rootRoute,
} as any)

const ItemRoute = ItemImport.update({
  path: '/item',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const CategoryRoute = CategoryImport.update({
  path: '/category',
  getParentRoute: () => rootRoute,
} as any)

const AddInventoryRoute = AddInventoryImport.update({
  path: '/addInventory',
  getParentRoute: () => rootRoute,
} as any)

const FreezerIndexRoute = FreezerIndexImport.update({
  path: '/freezer/',
  getParentRoute: () => rootRoute,
} as any)

const FreezerFreezerIdRoute = FreezerFreezerIdImport.update({
  path: '/freezer/$freezerId',
  getParentRoute: () => rootRoute,
} as any)

const CategoryCategoryIdRoute = CategoryCategoryIdImport.update({
  path: '/$categoryId',
  getParentRoute: () => CategoryRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/addInventory': {
      id: '/addInventory'
      path: '/addInventory'
      fullPath: '/addInventory'
      preLoaderRoute: typeof AddInventoryImport
      parentRoute: typeof rootRoute
    }
    '/category': {
      id: '/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/item': {
      id: '/item'
      path: '/item'
      fullPath: '/item'
      preLoaderRoute: typeof ItemImport
      parentRoute: typeof rootRoute
    }
    '/unit': {
      id: '/unit'
      path: '/unit'
      fullPath: '/unit'
      preLoaderRoute: typeof UnitImport
      parentRoute: typeof rootRoute
    }
    '/category/$categoryId': {
      id: '/category/$categoryId'
      path: '/$categoryId'
      fullPath: '/category/$categoryId'
      preLoaderRoute: typeof CategoryCategoryIdImport
      parentRoute: typeof CategoryImport
    }
    '/freezer/$freezerId': {
      id: '/freezer/$freezerId'
      path: '/freezer/$freezerId'
      fullPath: '/freezer/$freezerId'
      preLoaderRoute: typeof FreezerFreezerIdImport
      parentRoute: typeof rootRoute
    }
    '/freezer/': {
      id: '/freezer/'
      path: '/freezer/'
      fullPath: '/freezer/'
      preLoaderRoute: typeof FreezerIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AddInventoryRoute,
  CategoryRoute: CategoryRoute.addChildren({ CategoryCategoryIdRoute }),
  HomeRoute,
  InventoryRoute,
  ItemRoute,
  UnitRoute,
  FreezerFreezerIdRoute,
  FreezerIndexRoute,
})

/* prettier-ignore-end */
